ðŸ˜ŽWAP for Factorial using Recursion and Function
#include <bits/stdc++.h>
using namespace std;
int factorial(int n)
{
 if(n==0)
 {
     return 1;
 }
 else
 {
     int partialval=factorial(n-1);
     return n*partialval;
 }
}
int main()
{
  int n;
  cin>>n;
  if(n<0)
  {
      cout<<"error";
  }
  else
  {
      cout<<factorial(n);
  }
    return 0;
}





ðŸ˜ŽWAP for sum of n natural numbers using Recursion and Function
#include <bits/stdc++.h>             
using namespace std;
int sum(int n)
{
 if(n==1)
 {
     return 1;
 }
 else
 {
     int partialsum=sum(n-1);
     return n+partialsum;
 }
}
int main()
{
  int n;
  cin>>n;
  cout<<sum(n);

    return 0;
}






ðŸ˜ŽWAP for Fibonachi series using Recursion and Function
#include <iostream>
using namespace std;
int fibo(int n)
{
    if(n==2||n==1)
    {
        return 1;
    }
    else
    {
        int partialans=fibo(n-1);
        int partialans2=fibo(n-2);
        return partialans2+partialans;
    }
}
int main()
{
    int n;
    cin>>n;
    cout<<fibo(n);
    return 0;
}


ðŸ˜ŽWAP of Basics of Recursion(print 1 to n without loop)(tail recursion)
 #include <iostream>
using namespace std;
void printnumber(int n)
{
    if(n<1)
    {
      return;
    }
    else
    {
    cout<<n;
     printnumber(n-1);
    }
    
}

int main()
{
int n=10;
printnumber(n);
    return 0;
}





ðŸ˜ŽWAP of Basics of Recursion(print 1 to n without loop)(head recursion)
 #include <iostream>
using namespace std;
void printnumber(int n)
{
    if(n<1)
    {
      return;
    }
    else
    {
     printnumber(n-1);
    cout<<n;
    }
    
}

int main()
{
int n=10;
printnumber(n);
    return 0;
}




ðŸ˜ŽWAP of subset(POWER set)(Method 1)

class Solution {
public:
vector<vector<int>> helper(vector<int> &nums,int i)
{
    if(i>=nums.size()) return {{}};
    vector<vector<int>> partialans=helper(nums,i+1);
    vector<vector<int>> ans;
    for(vector<int> it:partialans)
    {
        ans.push_back(it);
    }
    for(vector<int> it:partialans)
    {
        it.push_back(nums[i]);
        ans.push_back(it);
    }
    return ans;
}
    vector<vector<int>> subsets(vector<int>& nums) {
        return helper(nums,0);
    }
};






ðŸ˜ŽWAP of subset(POWER set)(Method 2)


class Solution {
public:
 vector<vector<int>> ans;
vector<int> sub;
void helper(vector<int> &nums,int pos)
{
     if(pos==nums.size())  {
    ans.push_back(sub);
    return;
    }
    
        sub.push_back(nums[pos]);//include
        helper(nums,pos+1);

        sub.pop_back();    //not include
        helper(nums,pos+1);


}
    vector<vector<int>> subsets(vector<int>& nums) {
     helper(nums,0);
     return ans;
    }
};








ðŸ˜ŽWAP of UNIQUE subset(POWER set)(Method 2)

class Solution {
public:
vector<vector<int>> ans;
vector<int> sub;
void helper(vector<int> &nums,int pos)
{
if(pos==nums.size())
{
ans.push_back(sub);
return;
}
///to include

sub.push_back(nums[pos]);
helper(nums,pos+1);
sub.pop_back();


//to skip
while(pos+1<nums.size()&&nums[pos]==nums[pos+1]) pos++;

helper(nums,pos+1);

}
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        helper(nums,0);
        return ans;
        
    }
};








ðŸ˜ŽWAP of permutations 

class Solution {
public:
vector<vector<int>> ans;
void helper(vector<int> &nums,int pos){
if(pos>=nums.size()){
ans.push_back(nums);
}
for(int i=pos;i<nums.size();i++)
{
    swap(nums[i],nums[pos]);
   helper(nums,pos+1);
    swap(nums[i],nums[pos]);    //backtracking step
    
}
}
    vector<vector<int>> permute(vector<int>& nums) {
        helper(nums,0);
        return ans;
    }
};











ðŸ˜ŽWAP of UNIQUE permutations 

class Solution {
public:
vector<vector<int>> ans;
void helper(vector<int>& nums,int pos)
{
    if(pos>=nums.size())
    {
    ans.push_back(nums);
    }
    unordered_set<int> s;
    for(int i=pos;i<nums.size();i++)
    {
        if(s.find(nums[i])!=s.end())
        {
            continue;
        }
        s.insert(nums[i]);
        swap(nums[i],nums[pos]);
        helper(nums,pos+1);
        swap(nums[i],nums[pos]);
    }
}
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        helper(nums,0);
        return ans;
    }
};









ðŸ˜ŽWAP of Combination


class Solution {
public:
vector<vector<int>> ans;
vector<int> com;
void helper(int pos,int n,int k)
{
if(k==0)
{
    ans.push_back(com);
    return;
}
if(pos>n) 
{
    return;
}
//include pos

com.push_back(pos);
helper(pos+1,n,k-1);
//skip pos and k is same
com.pop_back();
helper(pos+1,n,k);

}
    vector<vector<int>> combine(int n, int k) {
        helper(1,n,k);
        return ans;   
    }
};







ðŸ˜ŽWAP of Combination Sum



class Solution {
public:
vector<vector<int>> ans;
vector<int> com;
void helper(vector<int>& candidates, int target,int pos,int sumnow)
{
    if(target==sumnow)
    {
        ans.push_back(com);
        return;
    }
    if(pos>=candidates.size())
    {
    return ;
    }
    if(sumnow>target)
    {
        return;
    }
     
     //skip
     helper(candidates,target,pos+1,sumnow);

    //pick
    sumnow+=candidates[pos];
    com.push_back(candidates[pos]);
    helper(candidates,target,pos,sumnow);
    sumnow+=candidates[pos];
    com.pop_back();
    
}
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        int sumnow=0;
        helper(candidates,target,0,sumnow);
        return ans;
    }
};






ðŸ˜ŽWAP of Combination SumII


class Solution {
public:
vector<vector<int>> ans;
vector<int> com;
void helper(vector<int>& candidates, int target,int sumnow,int pos)
{
 if(sumnow==target) 
 {
     ans.push_back(com);
     return ;
 }
 if(sumnow>target)
 {
     return;
 }
 if(pos==candidates.size())
 {
     return;
 }
 
 //include

  com.push_back(candidates[pos]);
  sumnow+=candidates[pos];
  helper(candidates,target,sumnow,pos+1);
  com.pop_back();
  sumnow-=candidates[pos];
  //skip
while(pos+1<candidates.size()&&candidates[pos]==candidates[pos+1]) pos++;
  helper(candidates,target,sumnow,pos+1); 
}
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        int sumnow=0;
        sort(candidates.begin(),candidates.end());
     helper(candidates,target,sumnow,0);
     return ans;   
    }
};
Console
