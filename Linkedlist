😎WAP of normal implimentation of Linked list


#include <bits/stdc++.h>
using namespace std;
class Node
{
    public:
    int data;
    Node*next;
    Node(int val)
    {
    data=val;
    };
    void prin(Node* head)
    {
     auto curr=head;
     while(curr)
     {
         cout<<curr->data<<" ";
         curr=curr->next;
     }
    }
};
int main()
{
    Node* a=new Node(1);
    Node* b=new Node(2);
    Node* c=new Node(3);
    (*a).next=b;
    b->next=c;
   a->prin(a);
    return 0;
}





😎WAP to design HASHSET

class MyHashSet {
public:
//unordered_set<int> s;
vector<list<int>> m;
int n;
    MyHashSet() {   
        n=100;
        m.resize(n);
    }
    int hash(int key)
    {
        return key%n;
    }
    list<int> ::iterator search(int key)
    {
        int i=hash(key);
       return find(m[i].begin(),m[i].end(),key);
    }
    void add(int key) {
        //s.insert(key);
        if(contains(key)) return;
        int i=hash(key);
        m[i].push_back(key);
//v[key]=1; 
    }
    void remove(int key) {
        //s.erase(key);
          //v[key]=0;
          if(!contains(key)) return;
          int i=hash(key);
          m[i].erase(search(key));

    }
    bool contains(int key) {
        /*if(s.find(key)!=s.end())
        {
        return true;
        }
        return false;*/
       /* if(v[key]==1)
        {
            return 1;
        }  
        return 0;*/
        int i=hash(key);
        if(search(key)!=m[i].end())
        {
            return true;
        }
        return false;
    }
};






😎WAP design HASHMAP

class MyHashMap {
public:
   // unordered_map<int,int> mapp;
   vector<list<pair<int,int>>> m;
   int n;
    MyHashMap() {
        n=1e6+1;
       // v.resize(n,-1);
        m.resize(n);
    }
    int hash(int key)
    {
      return key%n;
    }
    list<pair<int,int>>::iterator search(int key)
    {
        int i=hash(key);
        list<pair<int,int>>::iterator it=m[i].begin();
        while(it!=m[i].end())
        {
            if(it->first==key)
            {
                return it;
            }
            it++;
        }
        return it;
    }
    void put(int key, int value) {
        //mapp[key]=value;
      //  v[key]=value;
      int i=hash(key);
      remove(key);
      m[i].push_back({key,value});
    }
    
    int get(int key) {
        /*if(mapp.find(key)==mapp.end())
        {
            return -1;
        }
        return mapp[key] ;*/
        /*if(v[key]!=-1)
   { return v[key];
   }
    return -1;*/
     int i=hash(key);
      list<pair<int,int>>::iterator it=search(key);
      if(it==m[i].end())
      return -1;
      else
      return it->second;
     
    
    }
    void remove(int key) {
       // mapp.erase(key);
       // v[key]=-1;
       int i=hash(key);
     list<pair<int,int>>::iterator it=search(key);  
      if(it!=m[i].end())
       m[i].erase(it);
    }
};

